// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id "fabric-loom" version "1.0-SNAPSHOT"
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: "io.freefair.lombok"
//apply plugin: 'org.spongepowered.mixin'

/*mixin {
    add sourceSets.main, "materialis.refmap.json"
}*/

version = mod_version
group = 'com.rcx.materialis' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'materialis'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

loom {
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=materialis"
            // from ae2
            property "com.rcx.materialis.existingData", file("src/main/resources").absolutePath

            runDir "build/datagen"
        }
    }
}

repositories {
    mavenLocal()
    maven { // SlimeKnights and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // Psi & botania
        name = "jared maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.shedaniel.me/"  }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.cafeteria.dev" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.22'
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.officialMojangMappings()

    // dev environment
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    include(modImplementation(fabricApi.module("fabric-data-generation-api-v1", project.fabric_version)))

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}-stable"))
    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${forge_config_version}"))
    modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    include("io.github.tropheusj:serialization-hooks:0.3.23")

    // lombok
    compileOnly("org.projectlombok:lombok:1.18.22")
    annotationProcessor("org.projectlombok:lombok:1.18.22")

    testCompileOnly("org.projectlombok:lombok:1.18.22")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.22")

    // Copypasted from tinkers energistics. No shame whatsoever.
    modImplementation("slimeknights.tconstruct:Hephaestus:1.18.2-${tcon_version}")
    modImplementation("slimeknights.mantle:Mantle:1.18.2-${mantle_version}")

    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    modImplementation "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

    //compileOnly fg.deobf("curse.maven:eidolon-429625:3157832")
    //compileOnly fg.deobf("curse.maven:curios-309927:3748873")
    //compileOnly fg.deobf("vazkii.psi:Psi:${psi_version}")
    //compileOnly fg.deobf("curse.maven:magipsi-396405:3388248")
    modImplementation("vazkii.botania:Botania:${botania_version}")
//    modCompileOnly("curse.maven:quark-243121:3740897")
//    modCompileOnly("curse.maven:arl-250363:3642382")
//    modCompileOnly("curse.maven:thermal-222880:3790416")
//    modCompileOnly("curse.maven:cofhcore-69162:3793095")
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}")
//	modCompileOnly("curse.maven:immersiveengineering-231951:3755665")
//	modCompileOnly("curse.maven:prettypipes-376737:3724800")
//	modCompileOnly("curse.maven:arsnouveau-401955:3800858")

	//annotationProcessor 'org.spongepowered:mixin:0.1.2-SNAPSHOT:processor'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "materialis",
            "Specification-Vendor": "rcxcrafter",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"rcxcrafter",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    exclude 'META-INF/mods.toml'
    exclude 'pack.mcmeta'
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('remapJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
